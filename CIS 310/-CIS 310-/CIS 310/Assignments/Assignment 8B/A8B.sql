USE CIS31007
-- =============================================
-- Author:		Leslie Dawson
-- Create date: 4/13/2011
-- Description:	A8B - ADDING CUS_TOTAL_DISTANCE COLUMN TO CUSTOMER TABLE
-- =============================================
ALTER TABLE CUSTOMER
ADD CUS_TOTAL_DISTANCE REAL

-- =============================================
-- Author:		Leslie Dawson
-- Create date: 4/13/2011
-- Description:	A8B - STORED PROCEDURE TO POPULATE CUS_TOTAL_DISTANCE 
--				IN CUSTOMER TABLE
-- =============================================
CREATE PROCEDURE A8B_UPDATE_CUS_TOTAL_DISTANCE
AS
BEGIN
	DECLARE		CUS_TOTAL_DISTANCE CURSOR FOR
	SELECT		CUS_CODE, SUM(CHAR_DISTANCE) AS [CUS_TOTAL_DISTANCE]
	FROM		CHARTER
	GROUP BY	CUS_CODE
	
	DECLARE	@CUS_CODE INT
	DECLARE	@CUS_TOTAL_DISTANCE REAL
	
	OPEN	CUS_TOTAL_DISTANCE
	FETCH NEXT FROM CUS_TOTAL_DISTANCE INTO @CUS_CODE, @CUS_TOTAL_DISTANCE
	WHILE(@@FETCH_STATUS = 0)
	BEGIN
			UPDATE	CUSTOMER 
			SET		CUS_TOTAL_DISTANCE = @CUS_TOTAL_DISTANCE
			WHERE	CUS_CODE = @CUS_CODE
			FETCH NEXT FROM CUS_TOTAL_DISTANCE INTO @CUS_CODE, @CUS_TOTAL_DISTANCE
	END
	CLOSE		CUS_TOTAL_DISTANCE
	DEALLOCATE	CUS_TOTAL_DISTANCE
END

-- =============================================
-- Author:		Leslie Dawson
-- Create date: 4/13/2011
-- Description:	A8B - TRIGGER TO UPDATE CUS_TOTAL_DISTANCE IN CUSTOMER TABLE
--					  AFTER CHANGE MADE TO CHARTER TABLE
-- =============================================
CREATE TRIGGER A8B_TRIGGER_TO_UPDATE_CUS_TOTAL_DISTANCE
   ON  CHARTER 
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	DECLARE @CUS_CODE INT
	DECLARE	@DISTANCE_CHANGE REAL
	
	--FOR INSERT CASE (INSERTED TABLE NOT EMPTY)
	IF(EXISTS (SELECT * FROM INSERTED))
	BEGIN
			DECLARE	INSERT_CURSOR CURSOR FOR
			SELECT		I.CUS_CODE, SUM(I.CHAR_DISTANCE) AS [DISTANCE_CHANGE]
			FROM		INSERTED I
			GROUP BY	I.CUS_CODE
			
			OPEN INSERT_CURSOR
			FETCH NEXT FROM INSERT_CURSOR INTO @CUS_CODE, @DISTANCE_CHANGE
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
					UPDATE	CUSTOMER
					SET		CUS_TOTAL_DISTANCE = CUS_TOTAL_DISTANCE + @DISTANCE_CHANGE
					WHERE	CUS_CODE = @CUS_CODE
					FETCH NEXT FROM INSERT_CURSOR INTO @CUS_CODE, @DISTANCE_CHANGE
			END
			CLOSE INSERT_CURSOR
			DEALLOCATE INSERT_CURSOR
	END

	--FOR DELETE CASE (DELETED TABLE NOT EMPTY)
	IF(EXISTS (SELECT * FROM DELETED))
	BEGIN
			DECLARE	DELETE_CURSOR CURSOR FOR
			SELECT		D.CUS_CODE, SUM(D.CHAR_DISTANCE) AS [DISTANCE_CHANGE]
			FROM		DELETED D
			GROUP BY	D.CUS_CODE
			
			OPEN DELETE_CURSOR
			FETCH NEXT FROM DELETE_CURSOR INTO @CUS_CODE, @DISTANCE_CHANGE
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
					UPDATE	CUSTOMER
					SET		CUS_TOTAL_DISTANCE = CUS_TOTAL_DISTANCE - @DISTANCE_CHANGE
					WHERE	CUS_CODE = @CUS_CODE
					FETCH NEXT FROM DELETE_CURSOR INTO @CUS_CODE, @DISTANCE_CHANGE
			END
			CLOSE DELETE_CURSOR
			DEALLOCATE DELETE_CURSOR
	END
	
	--FOR UPDATE CASE (INSERTED AND DELETED TABLES NOT EMPTY)
	IF(EXISTS (SELECT * FROM DELETED) AND EXISTS (SELECT * FROM INSERTED))
	BEGIN
			DECLARE	UPDATE_CURSOR CURSOR FOR
			SELECT		I.CUS_CODE, SUM(I.CHAR_DISTANCE - D.CHAR_DISTANCE) AS [DISTANCE_CHANGE]
			FROM		INSERTED I INNER JOIN DELETED D ON I.CUS_CODE = D.CUS_CODE
			GROUP BY	I.CUS_CODE
			
			OPEN UPDATE_CURSOR
			FETCH NEXT FROM UPDATE_CURSOR INTO @CUS_CODE, @DISTANCE_CHANGE
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
					UPDATE	CUSTOMER
					SET		CUS_TOTAL_DISTANCE = CUS_TOTAL_DISTANCE + @DISTANCE_CHANGE
					WHERE	CUS_CODE = @CUS_CODE
					FETCH NEXT FROM UPDATE_CURSOR INTO @CUS_CODE, @DISTANCE_CHANGE
			END
			CLOSE UPDATE_CURSOR
			DEALLOCATE UPDATE_CURSOR
	END
END
